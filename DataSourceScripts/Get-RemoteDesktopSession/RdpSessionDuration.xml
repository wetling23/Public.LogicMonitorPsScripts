<?xml version="1.0" encoding="UTF-8" ?>
<feed  version="1.0" hasPendingRequests="false" >
  <company></company>
  <status>200</status>
  <errmsg>OK</errmsg>
  <interval>0</interval>
    <entry type="predatasource">
        <version>1585157145</version>
        <name>RdpSessionDuration</name>
        <displayedas>RDP Session Duration</displayedas>
        <description>Connects to the target machine and returns logged-in user information.</description>
        <collector>script</collector>
        <hasMultiInstances>true</hasMultiInstances>
        <schedule>3600</schedule>
        <appliesTo>isWindows()</appliesTo>
        <wildcardauto>true</wildcardauto>
        <wildcardpersist>false</wildcardpersist>
        <wildcardlinuxscript>ad_script</wildcardlinuxscript>
        <wildcardlinuxcmdline>type=&#34;powerShell&#34; </wildcardlinuxcmdline>
        <wildcardwinscript>ad_script</wildcardwinscript>
        <wildcardwincmdline>type=&#34;powerShell&#34; </wildcardwincmdline>
        <wildcardgroovyscript>&#60;#
    .DESCRIPTION

    .NOTES
        Author: Mike Hashemi
        V1.0.0.0 date: 19 March 2020
            - Initial release
    .LINK
        https://github.com/wetling23/Public.LogicMonitorPsScripts/tree/master/DataSourceScripts/Get-RemoteDesktopSession
#&#62;

# Initialize variables.
$computerName = &#39;##system.hostname##&#39;
$cred = New-Object System.Management.Automation.PSCredential (&#39;##wmi.user##&#39;, $(&#39;##wmi.pass##&#39; | ConvertTo-SecureString -AsPlainText -Force))

If (Test-Path -Path &#34;C:\Program Files (x86)\LogicMonitor\Agent\Logs&#34; -ErrorAction SilentlyContinue) {
    $logDirPath = &#34;C:\Program Files (x86)\LogicMonitor\Agent\Logs&#34; # Directory, into which the log file will be written.
}
Else {
    $logDirPath = &#34;$([System.Environment]::SystemDirectory)&#34; # Directory, into which the log file will be written.
}
$logFile = &#34;$logDirPath\datasource-Remote_Desktop_Session-AD-$computerName.log&#34;

$message = (&#34;{0}: Beginning {1}.&#34; -f ([datetime]::Now).ToString(&#34;yyyy-MM-dd`THH:mm:ss&#34;), $MyInvocation.MyCommand)
If (($PSBoundParameters[&#39;Verbose&#39;]) -or $VerbosePreference -eq &#39;Continue&#39;) { Write-Verbose $message; $message | Out-File -FilePath $logFile } Else { $message | Out-File -FilePath $logFile }

$message = (&#34;{0}: Connecting to {1}, to retieve logged-in users.&#34; -f ([datetime]::Now).ToString(&#34;yyyy-MM-dd`THH:mm:ss&#34;), $computerName)
If (($PSBoundParameters[&#39;Verbose&#39;]) -or $VerbosePreference -eq &#39;Continue&#39;) { Write-Verbose $message; $message | Out-File -FilePath $logFile -Append } Else { $message | Out-File -FilePath $logFile -Append }

$response = Invoke-Command -ComputerName $computerName -Credential $cred -ScriptBlock {
    $message = @&#34;
{0}: Getting active RDP sessions on {1}.`r`n
&#34;@ -f ([datetime]::Now).ToString(&#34;yyyy-MM-dd`THH:mm:ss&#34;), $env:COMPUTERNAME
    Set-Variable -Name message -Option AllScope
    $sessions = @()

    try {
        quser 2&#62;&#38;1 | Select-Object -Skip 1 | ForEach-Object {
            $CurrentLine = $_.Trim() -Replace &#39;\s+&#39;, &#39; &#39; -Split &#39;\s&#39;
            $HashProps = @{
                UserName = $CurrentLine[0]
            }

            $sessions += New-Object -TypeName PSCustomObject -Property $HashProps | Select-Object -Property UserName
        }
    }
    catch {
        $sessions += New-Object -TypeName PSCustomObject -Property @{
            Error = $_.Exception.Message
        } | Select-Object -Property UserName
    }

    $message += (&#34;{0}: Found {1} sessions ($).`r`n&#34; -f ([datetime]::Now).ToString(&#34;yyyy-MM-dd`THH:mm:ss&#34;), $sessions.Count, $HashProps.UserName)

    Return $sessions, $message
}

# Adding response to the DataSource log.
If (($PSBoundParameters[&#39;Verbose&#39;]) -or $VerbosePreference -eq &#39;Continue&#39;) { Write-Verbose $response[-1]; $response[-1] | Out-File -FilePath $logFile -Append } Else { $response[-1] | Out-File -FilePath $logFile -Append }

$response | ForEach-Object { If ($_.UserName -match &#39;^&#62;&#39;) { $_.UserName = $_.UserName.TrimStart(&#39;&#62;&#39;) } }

$response | Foreach {
    Write-Host (&#34;{0}##{1}&#34; -f $_.UserName, $_.Username)
}

Return 0</wildcardgroovyscript>
        <wildcardschedule>60</wildcardschedule>
        <wildcarddisable>false</wildcarddisable>
        <wildcarddeleteinactive>true</wildcarddeleteinactive>
        <agdmethod>none</agdmethod>
        <agdparams></agdparams>
        <group></group>
        <tags></tags>
        <technology>Requires PowerShell Remoting and uses the quser command to generate output.</technology>
        <adlist><![CDATA[{"agdmethod":"none","method":"ad_script","agdparams":"","id":0,"filters":[],"params":{"type":"powerShell","groovyscript":"<#\r\n    .DESCRIPTION\r\n\r\n    .NOTES\r\n        Author: Mike Hashemi\r\n        V1.0.0.0 date: 19 March 2020\r\n            - Initial release\r\n    .LINK\r\n        https://github.com/wetling23/Public.LogicMonitorPsScripts/tree/master/DataSourceScripts/Get-RemoteDesktopSession\r\n#>\r\n\r\n# Initialize variables.\r\n$computerName = '##system.hostname##'\r\n$cred = New-Object System.Management.Automation.PSCredential ('##wmi.user##', $('##wmi.pass##' | ConvertTo-SecureString -AsPlainText -Force))\r\n\r\nIf (Test-Path -Path \"C:\\Program Files (x86)\\LogicMonitor\\Agent\\Logs\" -ErrorAction SilentlyContinue) {\r\n    $logDirPath = \"C:\\Program Files (x86)\\LogicMonitor\\Agent\\Logs\" # Directory, into which the log file will be written.\r\n}\r\nElse {\r\n    $logDirPath = \"$([System.Environment]::SystemDirectory)\" # Directory, into which the log file will be written.\r\n}\r\n$logFile = \"$logDirPath\\datasource-Remote_Desktop_Session-AD-$computerName.log\"\r\n\r\n$message = (\"{0}: Beginning {1}.\" -f ([datetime]::Now).ToString(\"yyyy-MM-dd`THH:mm:ss\"), $MyInvocation.MyCommand)\r\nIf (($PSBoundParameters['Verbose']) -or $VerbosePreference -eq 'Continue') { Write-Verbose $message; $message | Out-File -FilePath $logFile } Else { $message | Out-File -FilePath $logFile }\r\n\r\n$message = (\"{0}: Connecting to {1}, to retieve logged-in users.\" -f ([datetime]::Now).ToString(\"yyyy-MM-dd`THH:mm:ss\"), $computerName)\r\nIf (($PSBoundParameters['Verbose']) -or $VerbosePreference -eq 'Continue') { Write-Verbose $message; $message | Out-File -FilePath $logFile -Append } Else { $message | Out-File -FilePath $logFile -Append }\r\n\r\n$response = Invoke-Command -ComputerName $computerName -Credential $cred -ScriptBlock {\r\n    $message = @\"\r\n{0}: Getting active RDP sessions on {1}.`r`n\r\n\"@ -f ([datetime]::Now).ToString(\"yyyy-MM-dd`THH:mm:ss\"), $env:COMPUTERNAME\r\n    Set-Variable -Name message -Option AllScope\r\n    $sessions = @()\r\n\r\n    try {\r\n        quser 2>&1 | Select-Object -Skip 1 | ForEach-Object {\r\n            $CurrentLine = $_.Trim() -Replace '\\s+', ' ' -Split '\\s'\r\n            $HashProps = @{\r\n                UserName = $CurrentLine[0]\r\n            }\r\n\r\n            $sessions += New-Object -TypeName PSCustomObject -Property $HashProps | Select-Object -Property UserName\r\n        }\r\n    }\r\n    catch {\r\n        $sessions += New-Object -TypeName PSCustomObject -Property @{\r\n            Error = $_.Exception.Message\r\n        } | Select-Object -Property UserName\r\n    }\r\n\r\n    $message += (\"{0}: Found {1} sessions ($).`r`n\" -f ([datetime]::Now).ToString(\"yyyy-MM-dd`THH:mm:ss\"), $sessions.Count, $HashProps.UserName)\r\n\r\n    Return $sessions, $message\r\n}\r\n\r\n# Adding response to the DataSource log.\r\nIf (($PSBoundParameters['Verbose']) -or $VerbosePreference -eq 'Continue') { Write-Verbose $response[-1]; $response[-1] | Out-File -FilePath $logFile -Append } Else { $response[-1] | Out-File -FilePath $logFile -Append }\r\n\r\n$response | ForEach-Object { If ($_.UserName -match '^>') { $_.UserName = $_.UserName.TrimStart('>') } }\r\n\r\n$response | Foreach {\r\n    Write-Host (\"{0}##{1}\" -f $_.UserName, $_.Username)\r\n}\r\n\r\nReturn 0"}}]]></adlist>
        <schemaVersion>2</schemaVersion>
        <dataSourceType>1</dataSourceType>
        <attributes>
        <attribute>
            <name>scripttype</name>
            <value>powerShell</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>scriptgroovy</name>
            <value>&#60;#
    .DESCRIPTION

    .NOTES
        Author: Mike Hashemi
        V1.0.0.0 date: 19 March 2020
            - Initial release
    .LINK
        https://github.com/wetling23/Public.LogicMonitorPsScripts/tree/master/DataSourceScripts/Get-RemoteDesktopSession
#&#62;

# Initialize variables.
$computerName = &#39;##system.hostname##&#39;
$userName = &#39;##WILDVALUE##&#39;
$cred = New-Object System.Management.Automation.PSCredential (&#39;##wmi.user##&#39;, $(&#39;##wmi.pass##&#39; | ConvertTo-SecureString -AsPlainText -Force))

If (Test-Path -Path &#34;C:\Program Files (x86)\LogicMonitor\Agent\Logs&#34; -ErrorAction SilentlyContinue) {
    $logDirPath = &#34;C:\Program Files (x86)\LogicMonitor\Agent\Logs&#34; # Directory, into which the log file will be written.
}
Else {
    $logDirPath = &#34;$([System.Environment]::SystemDirectory)&#34; # Directory, into which the log file will be written.
}
$logFile = &#34;$logDirPath\datasource-Remote_Desktop_Session-collection-$computerName.log&#34;

$message = (&#34;{0}: Beginning {1}.&#34; -f ([datetime]::Now).ToString(&#34;yyyy-MM-dd`THH:mm:ss&#34;), $MyInvocation.MyCommand)
If (($PSBoundParameters[&#39;Verbose&#39;]) -or $VerbosePreference -eq &#39;Continue&#39;) { Write-Verbose $message; $message | Out-File -FilePath $logFile } Else { $message | Out-File -FilePath $logFile }

$message = (&#34;{0}: Connecting to {1}, to retieve logged-in users.&#34; -f ([datetime]::Now).ToString(&#34;yyyy-MM-dd`THH:mm:ss&#34;), $computerName)
If (($PSBoundParameters[&#39;Verbose&#39;]) -or $VerbosePreference -eq &#39;Continue&#39;) { Write-Verbose $message; $message | Out-File -FilePath $logFile -Append } Else { $message | Out-File -FilePath $logFile -Append }

$response = Invoke-Command -ComputerName $computerName -Credential $cred -ScriptBlock {
    param(
        $user
    )
    $message = @&#34;
{0}: Getting active RDP sessions on {1}, for {2}.`r`n
&#34;@ -f ([datetime]::Now).ToString(&#34;yyyy-MM-dd`THH:mm:ss&#34;), $env:COMPUTERNAME, $user
    Set-Variable -Name message -Option AllScope
    $sessions = @()

    try {
        quser &#34;$user&#34; 2&#62;&#38;1 | Select-Object -Skip 1 | ForEach-Object {
            $CurrentLine = $_.Trim() -Replace &#39;\s+&#39;, &#39; &#39; -Split &#39;\s&#39;
            $HashProps = @{
                UserName = $CurrentLine[0]
            }

            # If session is disconnected different fields will be selected
            if ($CurrentLine[2] -eq &#39;Disc&#39;) {
                $HashProps.SessionName = $null
                $HashProps.Id = $CurrentLine[1]
                $HashProps.State = $CurrentLine[2]
                $HashProps.IdleMinutes = $CurrentLine[3]
                $HashProps.LogonTime = $CurrentLine[4..6] -join &#39; &#39;
                $HashProps.LogonTime = $CurrentLine[4..($CurrentLine.GetUpperBound(0))] -join &#39; &#39;
                $HashProps.SessionMinutes = (New-Timespan –Start $([datetime]($HashProps.LogonTime)) –End (Get-Date)).TotalMinutes
            }
            else {
                $HashProps.SessionName = $CurrentLine[1]
                $HashProps.Id = $CurrentLine[2]
                $HashProps.State = $CurrentLine[3]
                $HashProps.IdleMinutes = $CurrentLine[4]
                $HashProps.LogonTime = $CurrentLine[5..($CurrentLine.GetUpperBound(0))] -join &#39; &#39;
                $HashProps.SessionMinutes = (New-Timespan –Start $([datetime]($HashProps.LogonTime)) –End (Get-Date)).TotalMinutes
            }

            $sessions += New-Object -TypeName PSCustomObject -Property $HashProps | Select-Object -Property UserName, SessionName, Id, State, IdleMinutes, LogonTime, SessionMinutes, Error
        }
    }
    catch {
        $sessions += New-Object -TypeName PSCustomObject -Property @{
            Error = $_.Exception.Message
        } | Select-Object -Property UserName, SessionName, Id, State, IdleMinutes, LogonTime, SessionMinutes, Error
    }

    $message += (&#34;{0}: Found {1} sessions for {2}.`r`n&#34; -f ([datetime]::Now).ToString(&#34;yyyy-MM-dd`THH:mm:ss&#34;), $sessions.Count, $user)

    Return $sessions, $message
} -ArgumentList $userName

# Adding response to the DataSource log.
If (($PSBoundParameters[&#39;Verbose&#39;]) -or $VerbosePreference -eq &#39;Continue&#39;) { Write-Verbose $response[-1]; $response[-1] | Out-File -FilePath $logFile -Append } Else { $response[-1] | Out-File -FilePath $logFile -Append }

$response[0] | ForEach-Object { If ($_.IdleMinutes -eq &#39;.&#39;) { $_.IdleMinutes = 0 } }
$response[0] | ForEach-Object { $_.IdleMinutes = (New-TimeSpan -Hours (($_.IdleMinutes).Split(&#39;:&#39;)[0]) -Minutes (($_.IdleMinutes).Split(&#39;:&#39;)[1])).TotalMinutes }
$response[0] | ForEach-Object { If ($_.UserName -match &#39;^&#62;&#39;) { $_.UserName = $_.UserName.TrimStart(&#39;&#62;&#39;) } }

$message = (&#34;{0}: There are {1} sessions. The session data is:`r`n{2}&#34; -f ([datetime]::Now).ToString(&#34;yyyy-MM-dd`THH:mm:ss&#34;), $response[0].Count, ($response | Out-String))
If (($PSBoundParameters[&#39;Verbose&#39;]) -or $VerbosePreference -eq &#39;Continue&#39;) { Write-Verbose $message; $message | Out-File -FilePath $logFile -Append } Else { $message | Out-File -FilePath $logFile -Append }

$message = (&#34;{0}: Returning sessions info to LogicMonitor.&#34; -f ([datetime]::Now).ToString(&#34;yyyy-MM-dd`THH:mm:ss&#34;))
If (($PSBoundParameters[&#39;Verbose&#39;]) -or $VerbosePreference -eq &#39;Continue&#39;) { Write-Verbose $message; $message | Out-File -FilePath $logFile -Append } Else { $message | Out-File -FilePath $logFile -Append }

&#34;IdleMinutes={0}&#34; -f $response.IdleMinutes
&#34;SessionMinutes={0}&#34; -f $response.SessionMinutes
&#34;Username={0}&#34; -f $response.UserName

Return 0</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowsscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowscmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxcmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        </attributes>
        <datapoints>
        <datapoint>
            <name>IdleMinutes</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>regex</postprocessormethod>
            <postprocessorparam>IdleMinutes=(\d+)</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr>&#62; 60 60</alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <description>Number of minutes that the session has been idle.</description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>SessionMinutes</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>regex</postprocessormethod>
            <postprocessorparam>SessionMinutes=(\d*)</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <description>Total minutes for the session.</description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        </datapoints>
        <graphs>
        </graphs>
        <overviewgraphs>
        </overviewgraphs>
        <scripts>
        </scripts>
    </entry>
</feed>
